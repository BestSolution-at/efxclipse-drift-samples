plugins {
    id 'cpp-library'
    id 'xcode'
}

def getFrameworkHeaderPath(framework) {
    "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/${framework}.framework/Headers"
}

library {
    baseName = 'samples'
    dependencies {
        implementation project(':libs:glew')
        implementation project(':libs:minctx')
    }
    linkage = [ Linkage.SHARED ]

    targetMachines = [
      machines.linux.x86_64,
      machines.windows.x86_64,
      machines.macOS.x86_64
    ]

    privateHeaders {
        from file ('src/main/headers')
    
        if (Os.isFamily(Os.FAMILY_MAC)) {
            from file ('src/main/headers-macos')
//            from file(getFrameworkHeaderPath('OpenGL'))
        }
    }

    binaries.configureEach { binary ->
      def compileTask = compileTask.get()
      def linkTask = linkTask.get()

      addJNIIncludes(compileTask)

      if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        linkTask.linkerArgs.add("opengl32.lib")
        linkTask.linkerArgs.add("gdi32.lib")
        linkTask.linkerArgs.add("user32.lib")
      } else if (Os.isFamily(Os.FAMILY_MAC)) {

       //linkTask.linkerArgs.add('-stdlib=libc++')

        linkTask.linkerArgs.add("-framework")
        linkTask.linkerArgs.add("OpenGL")

//linkTask.linkerArgs.add '-static'
//linkTask.linkerArgs.add '-llibc++'
      } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        linkTask.linkerArgs.add("-lGL")
        linkTask.linkerArgs.add("-lX11")
      }
    }
}

tasks.withType(CppCompile).configureEach {
  macros.put("GLEW_STATIC", null)
  compilerArgs.add '-std=c++11'
}


import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.nativeplatform.platform.OperatingSystem
import org.gradle.internal.jvm.Jvm

def getJNIPlatformDir() {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    'win32'
  } else if (Os.isFamily(Os.FAMILY_MAC)) {
    'darwin'
  } else if (Os.isFamily(Os.FAMILY_UNIX)) {
    'linux'
  }
}

def addJNIIncludes(compileTask) {
  def includeDir = Jvm.current().javaHome.toPath().resolve('include')
  def platformIncludeDir = includeDir.resolve(getJNIPlatformDir())
  compileTask.includes(includeDir)
  compileTask.includes(platformIncludeDir)
}
