plugins {
    id 'cpp-library'
}

model {
  toolChains {
    visualStudio(VisualCpp) {}
    gcc(Gcc) {}
    clang(Clang) {
      eachPlatform {
        cppCompiler.withArguments { args ->
          args << '-arch'
          args << 'x86_64'
          args << '-arch'
          args << 'arm64'
        }
        linker.withArguments { args ->
          args << '-arch'
          args << 'x86_64'
          args << '-arch'
          args << 'arm64'
        }
      }
    }
  }
}

library {
    linkage = [ Linkage.STATIC ]

    targetMachines = [
      machines.linux.x86_64,
      machines.windows.x86_64,
      machines.macOS.x86_64
    ]

    publicHeaders.from file('include')

    binaries.configureEach {
        def compileTask = compileTask.get()
        compileTask.source.from file('src/glew.c')
    }

}

tasks.withType(CppCompile).configureEach {
  macros.put("GLEW_STATIC", null)
  compilerArgs.add '-std=c++11'
  compilerArgs.add '-fPIC'
}
